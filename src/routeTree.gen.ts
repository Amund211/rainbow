/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root.tsx'
import { Route as SettingsImport } from './routes/settings.tsx'
import { Route as IndexImport } from './routes/index.tsx'
import { Route as SessionIndexImport } from './routes/session/index.tsx'
import { Route as SessionUuidImport } from './routes/session/$uuid.tsx'
import { Route as HistoryExploreImport } from './routes/history.explore.tsx'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SessionIndexRoute = SessionIndexImport.update({
  id: '/session/',
  path: '/session/',
  getParentRoute: () => rootRoute,
} as any)

const SessionUuidRoute = SessionUuidImport.update({
  id: '/session/$uuid',
  path: '/session/$uuid',
  getParentRoute: () => rootRoute,
} as any)

const HistoryExploreRoute = HistoryExploreImport.update({
  id: '/history/explore',
  path: '/history/explore',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/history/explore': {
      id: '/history/explore'
      path: '/history/explore'
      fullPath: '/history/explore'
      preLoaderRoute: typeof HistoryExploreImport
      parentRoute: typeof rootRoute
    }
    '/session/$uuid': {
      id: '/session/$uuid'
      path: '/session/$uuid'
      fullPath: '/session/$uuid'
      preLoaderRoute: typeof SessionUuidImport
      parentRoute: typeof rootRoute
    }
    '/session/': {
      id: '/session/'
      path: '/session'
      fullPath: '/session'
      preLoaderRoute: typeof SessionIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/history/explore': typeof HistoryExploreRoute
  '/session/$uuid': typeof SessionUuidRoute
  '/session': typeof SessionIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/history/explore': typeof HistoryExploreRoute
  '/session/$uuid': typeof SessionUuidRoute
  '/session': typeof SessionIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/history/explore': typeof HistoryExploreRoute
  '/session/$uuid': typeof SessionUuidRoute
  '/session/': typeof SessionIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/history/explore'
    | '/session/$uuid'
    | '/session'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/history/explore' | '/session/$uuid' | '/session'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/history/explore'
    | '/session/$uuid'
    | '/session/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRoute
  HistoryExploreRoute: typeof HistoryExploreRoute
  SessionUuidRoute: typeof SessionUuidRoute
  SessionIndexRoute: typeof SessionIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRoute,
  HistoryExploreRoute: HistoryExploreRoute,
  SessionUuidRoute: SessionUuidRoute,
  SessionIndexRoute: SessionIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/history/explore",
        "/session/$uuid",
        "/session/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/history/explore": {
      "filePath": "history.explore.tsx"
    },
    "/session/$uuid": {
      "filePath": "session/$uuid.tsx"
    },
    "/session/": {
      "filePath": "session/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
