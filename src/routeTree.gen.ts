/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root.tsx'
import { Route as SessionImport } from './routes/session.tsx'
import { Route as IndexImport } from './routes/index.tsx'
import { Route as HistoryExploreImport } from './routes/history.explore.tsx'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy.tsx').then((d) => d.Route))

const SessionRoute = SessionImport.update({
  id: '/session',
  path: '/session',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HistoryExploreRoute = HistoryExploreImport.update({
  id: '/history/explore',
  path: '/history/explore',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/session': {
      id: '/session'
      path: '/session'
      fullPath: '/session'
      preLoaderRoute: typeof SessionImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/history/explore': {
      id: '/history/explore'
      path: '/history/explore'
      fullPath: '/history/explore'
      preLoaderRoute: typeof HistoryExploreImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/session': typeof SessionRoute
  '/about': typeof AboutLazyRoute
  '/history/explore': typeof HistoryExploreRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/session': typeof SessionRoute
  '/about': typeof AboutLazyRoute
  '/history/explore': typeof HistoryExploreRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/session': typeof SessionRoute
  '/about': typeof AboutLazyRoute
  '/history/explore': typeof HistoryExploreRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/session' | '/about' | '/history/explore'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/session' | '/about' | '/history/explore'
  id: '__root__' | '/' | '/session' | '/about' | '/history/explore'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SessionRoute: typeof SessionRoute
  AboutLazyRoute: typeof AboutLazyRoute
  HistoryExploreRoute: typeof HistoryExploreRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SessionRoute: SessionRoute,
  AboutLazyRoute: AboutLazyRoute,
  HistoryExploreRoute: HistoryExploreRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/session",
        "/about",
        "/history/explore"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/session": {
      "filePath": "session.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/history/explore": {
      "filePath": "history.explore.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
