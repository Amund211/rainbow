/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root.tsx'
import { Route as SettingsRouteImport } from './routes/settings.tsx'
import { Route as DownloadsRouteImport } from './routes/downloads.tsx'
import { Route as AboutRouteImport } from './routes/about.tsx'
import { Route as IndexRouteImport } from './routes/index.tsx'
import { Route as SessionIndexRouteImport } from './routes/session/index.tsx'
import { Route as SessionUuidRouteImport } from './routes/session/$uuid.tsx'
import { Route as HistoryExploreRouteImport } from './routes/history.explore.tsx'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadsRoute = DownloadsRouteImport.update({
  id: '/downloads',
  path: '/downloads',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionIndexRoute = SessionIndexRouteImport.update({
  id: '/session/',
  path: '/session/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionUuidRoute = SessionUuidRouteImport.update({
  id: '/session/$uuid',
  path: '/session/$uuid',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoryExploreRoute = HistoryExploreRouteImport.update({
  id: '/history/explore',
  path: '/history/explore',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/downloads': typeof DownloadsRoute
  '/settings': typeof SettingsRoute
  '/history/explore': typeof HistoryExploreRoute
  '/session/$uuid': typeof SessionUuidRoute
  '/session': typeof SessionIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/downloads': typeof DownloadsRoute
  '/settings': typeof SettingsRoute
  '/history/explore': typeof HistoryExploreRoute
  '/session/$uuid': typeof SessionUuidRoute
  '/session': typeof SessionIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/downloads': typeof DownloadsRoute
  '/settings': typeof SettingsRoute
  '/history/explore': typeof HistoryExploreRoute
  '/session/$uuid': typeof SessionUuidRoute
  '/session/': typeof SessionIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/downloads'
    | '/settings'
    | '/history/explore'
    | '/session/$uuid'
    | '/session'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/downloads'
    | '/settings'
    | '/history/explore'
    | '/session/$uuid'
    | '/session'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/downloads'
    | '/settings'
    | '/history/explore'
    | '/session/$uuid'
    | '/session/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  DownloadsRoute: typeof DownloadsRoute
  SettingsRoute: typeof SettingsRoute
  HistoryExploreRoute: typeof HistoryExploreRoute
  SessionUuidRoute: typeof SessionUuidRoute
  SessionIndexRoute: typeof SessionIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/downloads': {
      id: '/downloads'
      path: '/downloads'
      fullPath: '/downloads'
      preLoaderRoute: typeof DownloadsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session/': {
      id: '/session/'
      path: '/session'
      fullPath: '/session'
      preLoaderRoute: typeof SessionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session/$uuid': {
      id: '/session/$uuid'
      path: '/session/$uuid'
      fullPath: '/session/$uuid'
      preLoaderRoute: typeof SessionUuidRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/history/explore': {
      id: '/history/explore'
      path: '/history/explore'
      fullPath: '/history/explore'
      preLoaderRoute: typeof HistoryExploreRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  DownloadsRoute: DownloadsRoute,
  SettingsRoute: SettingsRoute,
  HistoryExploreRoute: HistoryExploreRoute,
  SessionUuidRoute: SessionUuidRoute,
  SessionIndexRoute: SessionIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
